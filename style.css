let bleDevice = null;
let bleServer = null;
let bleService = null;
let bleCharacteristic = null;

const SERVICE_UUID = '12345678-1234-1234-1234-1234567890ab';
const CHARACTERISTIC_UUID = 'abcdefab-1234-1234-1234-abcdefabcdef';

document.getElementById('connect').addEventListener('click', async () => {
  try {
    bleDevice = await navigator.bluetooth.requestDevice({
      filters: [{ name: 'ESP32C3-MotorBLE' }],
      optionalServices: [SERVICE_UUID]
    });

    bleServer = await bleDevice.gatt.connect();
    bleService = await bleServer.getPrimaryService(SERVICE_UUID);
    bleCharacteristic = await bleService.getCharacteristic(CHARACTERISTIC_UUID);

    document.getElementById('status').innerText = '✅ Connected to ESP32';

    // 启用接收通知
    await bleCharacteristic.startNotifications();
    bleCharacteristic.addEventListener('characteristicvaluechanged', handleNotifications);

    console.log('🔗 Connected & Notifications started');
  } catch (error) {
    console.error('❌ Connection failed:', error);
    document.getElementById('status').innerText = '❌ Connection failed';
  }
});

function sendCommand(cmd) {
  if (!bleCharacteristic) {
    alert('Please connect to the BLE device first.');
    return;
  }
  bleCharacteristic.writeValue(new TextEncoder().encode(cmd));
  console.log('📤 Sent:', cmd);
}

function handleNotifications(event) {
  const value = new TextDecoder().decode(event.target.value);
  console.log('📥 Received:', value);

  // 解析数据格式：X:0.45 Y:-0.20 Z:0.98 ENC:120
  const xMatch = value.match(/X:([-.\d]+)/);
  const yMatch = value.match(/Y:([-.\d]+)/);
  const zMatch = value.match(/Z:([-.\d]+)/);
  const encMatch = value.match(/ENC:(-?\d+)/);

  if (xMatch) document.getElementById('x').innerText = xMatch[1];
  if (yMatch) document.getElementById('y').innerText = yMatch[1];
  if (zMatch) document.getElementById('z').innerText = zMatch[1];
  if (encMatch) document.getElementById('encoder').innerText = encMatch[1];
}
